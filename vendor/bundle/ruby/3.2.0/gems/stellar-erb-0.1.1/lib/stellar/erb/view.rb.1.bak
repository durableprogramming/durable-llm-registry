module Stellar
  module Erb
    class View
      attr_reader :template_path, :template, :context

      def initialize(template_path, context = {})
        @template_path = template_path
        @context = context
        @template = File.read(template_path)
      end

      def render(locals = {})
        b = binding_with_context(locals)
        result = ::ERB.new(template, trim_mode: '-').result(b)
        result
      rescue => e
        handle_error(e)
      end

      private

      def binding_with_context(locals = {})
        context_binding = binding
        context.merge(locals).each do |key, value|
          context_binding.local_variable_set(key.to_sym, value)
        end
        context_binding
      end

      def handle_error(error)
        if error.backtrace.any? { |line| line.include?(template_path) }
          raise error
        else
          new_error = error.class.new("#{error.message} (in template: #{template_path})")
          new_error.set_backtrace(error.backtrace)
          raise new_error
        end
      end
    end
  end
end
